---
- name: Install  & config web server
  hosts: client
  vars_files:
   - secrets.yml
  vars:
   key_type: rsa
   bits: 4096
   comment: "Generated by ansible"
   user_name: borg
   remote_user: root
   destination_hosts: ["192.168.1.105"]
  become: true
  tasks:

     - name: Update apt package cache
       ansible.builtin.apt:
        update_cache: true

     - name: Install packages
       ansible.builtin.apt:
        name:
         - borgbackup
        state: present

     - name: 'Create borg group on server'
       ansible.builtin.group:
        name: 'borg'
        system: 'true' 

     - name: 'Create borg user on server'
       ansible.builtin.user:
        name: 'borg'
        group: 'borg'
        shell: '/bin/bash'
        home: '/srv/borg'
        createhome: 'true'
        system: 'true'
        password: "{{ upassword | password_hash('sha512') }}"

     - name: Ensure .ssh directory exists with proper permissions
       ansible.builtin.file:
        path: "/srv/borg/.ssh"
        owner: "borg"
        group: "borg"
        mode: '0700'
        state: directory

     - name: Generate new SSH keypair for user borg
       ansible.builtin.shell: >
         ssh-keygen -t {{key_type}} -b {{bits}} -C '{{comment}}' -f /srv/borg/.ssh/id_{{key_type}} -N ""
       args:
        creates: "/srv/borg/.ssh/id_{{key_type}}.pub"

     - name: Get public key from generated private key
       ansible.builtin.shell: ssh-keygen -yf /srv/borg/.ssh/id_rsa
       args:
        executable: /bin/bash
       register: pub_key_output

     # Преобразуем вывод в строку, пригодную для authorised_keys
     - ansible.builtin.set_fact:
        pub_key_string: "{{ pub_key_output.stdout.strip() }}"

- hosts: serv
  become: true
  tasks:
     - name: Ensure .ssh directory exists
       ansible.builtin.file:
        path: "/srv/borg/.ssh/"
        state: directory
        mode: '0700'

     - name: Add public key to authorized_keys
       ansible.builtin.authorized_key:
        user: borg
        key: "{{ hostvars['client']['pub_key_string'] }}"
        state: present

- hosts: client
  become: true
  tasks:
   - name: Change permissions on ssh
     ansible.builtin.file:
      path: /srv/borg/.ssh
      state: directory
      recurse: true
      owner: borg
      group: borg

   - name: Initialize remote repo as borg user
     become: yes
     become_user: borg
     environment:
      BORG_PASSPHRASE: 123qweASD!
      BORG_RSH: "ssh -i /srv/borg/.ssh/id_rsa -o StrictHostKeyChecking=no"
     ansible.builtin.command: >
      borg init
      --encryption=repokey-blake2
      borg@192.168.1.105:/var/backup/

  # - name: Initialize the repository with encryption
  #   ansible.builtin.command: >
  #    borg init --encryption=none {{ repo_path }}
  #   vars:
  #    repo_path: "borg@192.168.1.105:/var/backup/"

  # - name: Run borg init on remote server
  #   ansible.builtin.command:
  #      cmd: /usr/bin/borg init --encryption=repokey-blake2 borg@192.168.1.105:/var/backup/
  #   become: true 
  #   become_user: borg

  # - name: Check backup
  #   ansible.builtin.shell:
  #    cmd: /usr/bin/borg create --stats --list borg@192.168.1.105:/var/backup/::"etc-{now:%Y-%m-%d_%H:%M:%S}" /etc'
  #   args:
  #    executable: /bin/bash
  #   become: true 
  #   become_user: root

   - name: 'Deploy the systemd service and timer'
     ansible.builtin.template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      owner: 'root'
      mode: '0444'
     loop:
      - { src: 'configs/borg-backup.service', dest: '/etc/systemd/system/borg-backup.service' }
      - { src: 'configs/borg-backup.timer', dest: '/etc/systemd/system/borg-backup.timer' }


   - name: Run borg init on remote server
     ansible.builtin.command:
        cmd: systemctl daemon-reload
     become: true 
     become_user: root

   - name: Enable services
     ansible.builtin.service:
      name: "{{ item }}"
      enabled: true
     loop: 
      - borg-backup.service
      - borg-backup.timer

   - name: Enable services
     ansible.builtin.service:
      name: "{{ item }}"
      state: started
     loop: 
      - borg-backup.service
      - borg-backup.timer 
  
...


